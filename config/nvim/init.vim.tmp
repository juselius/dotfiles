" vim:set ft=vim:
" This is a test comment
" execute pathogen#infect()

set nocompatible
filetype plugin indent on

" Tap options - 4 spaces
set shiftwidth=4
set tabstop=4
set expandtab

" If there are local vimrc
set exrc

set shell=/bin/sh

" Indenting
autocmd FileType c set cindent
autocmd FileType haskell set smartindent

" Set path to search folders from root to allow for fuzzy search
set path+=**
set cmdheight=2

" Syntax highlighting
syntax on

" Highlight yanking
au TextYankPost * silent! lua vim.highlight.on_yank()

" Colorscheme
set termguicolors
colorscheme zephyr

highlight NonText guifg=#003b46

" Show matching brackets
set showmatch
highlight MatchParen ctermbg=cyan

" Show line numbers
" set number
" set relativenumber

set nohlsearch

" Text width
set textwidth=79
set colorcolumn=+1
" hi ColorColumn ctermbg=White
autocmd FileType mail setlocal tw=79
autocmd FileType tex setlocal tw=79

" Whitespace and tabs
set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:⋅,extends:⟩,precedes:⟨
" Opt-in on setting list, so added it to fsharp below
" set list

" Wildmenu
" set wildmenu
set wildmode=full

" Increase update time
set updatetime=300

" Commands
command! MakeTags !ctags -R .

"
" === Bindings ===
"
let mapleader = " "

nnoremap n nzz
nnoremap gm :Man<CR>

" Bind <space>cw to clearing whitespace
nnoremap <silent> <leader>cw :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" TeX shortcuts
autocmd FileType tex nnoremap <leader>b :w<CR> :! pdflatex %<CR>

" Terminal mode
tnoremap <Esc> <C-\><C-N>

" Fugitive
nmap <leader>gs :G<CR>
nmap <leader>gp :diffput<CR>
nmap <leader>gg :diffget<CR>
nmap <leader>gn :diffget //3<CR>
nmap <leader>gt :diffget //2<CR>

function! DebugMake()
  export DEBUG=true
  :make!<CR>
endfunction

" :make
nmap <leader>cc :make!<CR>
nmap <leader>dc DebugMake()<CR>

" tmux vim navigation
nnoremap <silent> <C-h> :TmuxNavigateLeft<CR>
nnoremap <silent> <C-j> :TmuxNavigateDown<CR>
nnoremap <silent> <C-k> :TmuxNavigateUp<CR>
nnoremap <silent> <C-l> :TmuxNavigateRight<CR>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<CR>

map <C-N> :Ex<CR>

nnoremap <C-c> <C-w>c

map <F6> :setlocal spell! spelllang=en_us<CR>
map <F7> :setlocal spell! spelllang=nb<CR>

" Fzf
nnoremap <C-p> <cmd>Telescope git_files<CR>
nnoremap <leader>p <cmd>Telescope find_files<CR>

"
" nvim-cmp: completions
"
function! s:nvim_cmp()
lua << EOF
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body)
      end,
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-y>']     = cmp.mapping.confirm({ select = true }),
      ['<C-u>']     = cmp.mapping.scroll_docs(-4),
      ['<C-d>']     = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
    }),
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'vsnip' },
      }, {
        { name = 'path' },
        { name = 'buffer' },
      })
  })

  cmp.setup.cmdline('/', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })
EOF
endfunction

"
" nvim-lsp
"
function! s:nvim_lsp()
lua << EOF
    local on_attach = function(client, bufnr)
        local function buf_set_keymap(...)
            vim.api.nvim_buf_set_keymap(bufnr, ...)
        end

        local opts = { noremap=true, silent=true }
        buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
        buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
        buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
        buf_set_keymap('n', 'gh', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
        buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
        buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
    end


    local capabilites =
      require('cmp_nvim_lsp')
        .default_capabilities(vim.lsp.protocol.make_client_capabilities())

    local setup = function(server)
        server.setup {
            autostart = true,
            on_attach = on_attach,
            flags = {
                debounce_text_changes = 150,
            },
            capabilites = capabilites
        }
    end

    local lspconfig = require('lspconfig')
    setup(lspconfig.fsautocomplete)
    setup(lspconfig.ccls)
    -- setup(lspconfig.clangd)
    setup(lspconfig.ts_ls)
    setup(lspconfig.rnix)
    setup(lspconfig.gopls)
    setup(lspconfig.tailwindcss)
    setup(lspconfig.rust_analyzer)
    setup(lspconfig.zls)

    vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(
        vim.lsp.handlers.hover, { focusable = false }
    )
EOF
endfunction

"
" nvim-dap
"
function! s:nvim_dap()
  nnoremap <silent> <leader>b <cmd>lua require'dap'.toggle_breakpoint()<CR>

lua << EOF
  local dap = require('dap')

EOF
endfunction

" fsharp
autocmd BufNewFile,BufRead *.fs,*.fsx,*.fsi set filetype=fsharp
" lua require('lspconfig').fsautocomplete.setup{}

function! s:fsharp()
  let g:fsharp#lsp_auto_setup = 0
  let g:fsharp#lsp_codelens = 0

  autocmd FileType fsharp set signcolumn=yes tw=119 ts=4 sw=4 number relativenumber list

  " let g:fsharp#exclude_project_directories = ['paket_files']
  " let g:fsharp#fsautocomplete_command = ['fsautocomplete']
endfunction

" nix
" lua require('lspconfig').rnix-lsp.setup{}

function! s:nvim_treesitter()
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {},
  sync_install = false,
  ignore_install = {},
  highlight = {
    enable = true,
    disable = { "latex" },
    additional_vim_regex_highlighting = false,
  },
}
EOF
endfunction

call s:fsharp()
call s:nvim_cmp()
call s:nvim_lsp()
call s:nvim_dap()
call s:nvim_treesitter()

" Latex settings
" NB: Don't need it because of spell shortcuts
" autocmd FileType tex setlocal wrap

" vimtex
let g:vimtex_compiler_progname = 'nvr'
let g:tex_flavor = 'latex'

" Tmux
let g:tmux_navigator_no_mappings = 1

" === Language specific ===
" NOTE: scl = signcolumn

" C/C++
autocmd FileType c set scl=yes cino+=(0
autocmd FileType cpp set scl=yes cino+=(0

" rust
autocmd FileType rust set scl=yes

" javascript
autocmd FileType javascript set ts=2 sw=2 tw=79
" typescript
autocmd FileType typescript set ts=2 sw=2 tw=79 scl=yes
" tsx
autocmd FileType typescriptreact set sw=2 ts=2 tw=79 scl=yes

" vim
autocmd FileType vim set sw=2 ts=2

" SQL
autocmd FileType sql set shiftwidth=2 tabstop=2

" Yaml
autocmd FileType yaml set shiftwidth=2 tabstop=2

" TeX
" I want relative numbers with TeX to offset it a little bit from the left
autocmd FileType tex set shiftwidth=2 tabstop=2 nu rnu

" Hyper Text Markup Language
autocmd FileType html set shiftwidth=2 tabstop=2

" Statusline

set laststatus=2

" hi StatusLine ctermfg=8 ctermbg=3 cterm=NONE
" hi StatusLineNC ctermfg=2 ctermbg=8 cterm=NONE

function! GitBranch()
    return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
    let l:branchname = GitBranch()
    return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%#PmenuSel#
set statusline+=\ %f
set statusline+=\ %2*[%M%R%H%W]%*
" Right side of statusline
set statusline+=%#CursorColumn#
set statusline+=%=
set statusline+=\ %y
set statusline+=\ %p%%
set statusline+=\ %l:%c
